package com.prpr894.cplayer.greendao.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.prpr894.cplayer.bean.LiveRoomItemDataBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "LIVE_ROOM_ITEM_DATA_BEAN".
*/
public class LiveRoomItemDataBeanDao extends AbstractDao<LiveRoomItemDataBean, String> {

    public static final String TABLENAME = "LIVE_ROOM_ITEM_DATA_BEAN";

    /**
     * Properties of entity LiveRoomItemDataBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Userid = new Property(0, String.class, "userid", true, "USERID");
        public final static Property Nickname = new Property(1, String.class, "nickname", false, "NICKNAME");
        public final static Property Logourl = new Property(2, String.class, "logourl", false, "LOGOURL");
        public final static Property Play_url = new Property(3, String.class, "play_url", false, "PLAY_URL");
    }


    public LiveRoomItemDataBeanDao(DaoConfig config) {
        super(config);
    }
    
    public LiveRoomItemDataBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"LIVE_ROOM_ITEM_DATA_BEAN\" (" + //
                "\"USERID\" TEXT PRIMARY KEY NOT NULL ," + // 0: userid
                "\"NICKNAME\" TEXT," + // 1: nickname
                "\"LOGOURL\" TEXT," + // 2: logourl
                "\"PLAY_URL\" TEXT);"); // 3: play_url
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"LIVE_ROOM_ITEM_DATA_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, LiveRoomItemDataBean entity) {
        stmt.clearBindings();
 
        String userid = entity.getUserid();
        if (userid != null) {
            stmt.bindString(1, userid);
        }
 
        String nickname = entity.getNickname();
        if (nickname != null) {
            stmt.bindString(2, nickname);
        }
 
        String logourl = entity.getLogourl();
        if (logourl != null) {
            stmt.bindString(3, logourl);
        }
 
        String play_url = entity.getPlay_url();
        if (play_url != null) {
            stmt.bindString(4, play_url);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, LiveRoomItemDataBean entity) {
        stmt.clearBindings();
 
        String userid = entity.getUserid();
        if (userid != null) {
            stmt.bindString(1, userid);
        }
 
        String nickname = entity.getNickname();
        if (nickname != null) {
            stmt.bindString(2, nickname);
        }
 
        String logourl = entity.getLogourl();
        if (logourl != null) {
            stmt.bindString(3, logourl);
        }
 
        String play_url = entity.getPlay_url();
        if (play_url != null) {
            stmt.bindString(4, play_url);
        }
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public LiveRoomItemDataBean readEntity(Cursor cursor, int offset) {
        LiveRoomItemDataBean entity = new LiveRoomItemDataBean( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // userid
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // nickname
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // logourl
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3) // play_url
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, LiveRoomItemDataBean entity, int offset) {
        entity.setUserid(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setNickname(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setLogourl(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setPlay_url(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
     }
    
    @Override
    protected final String updateKeyAfterInsert(LiveRoomItemDataBean entity, long rowId) {
        return entity.getUserid();
    }
    
    @Override
    public String getKey(LiveRoomItemDataBean entity) {
        if(entity != null) {
            return entity.getUserid();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(LiveRoomItemDataBean entity) {
        return entity.getUserid() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
